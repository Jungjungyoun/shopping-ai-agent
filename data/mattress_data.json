},\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"load_data\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# 데이터 로드 및 확인\\n\",\n    \"with open('mattress_data.json', 'r', encoding='utf-8') as f:\\n\",\n    \"    mattress_data = json.load(f)\\n\",\n    \"\\n\",\n    \"# 데이터 구조 확인\\n\",\n    \"print(\\\"매트리스 데이터 구조:\\\")\\n\",\n    \"for mattress in mattress_data['mattresses'][:2]:\\n\",\n    \"    print(f\\\"- {mattress['name']}: {mattress['type']}, {mattress['price']:,}원\\\")\\n\",\n    \"\\n\",\n    \"# DataFrame으로 변환하여 데이터 탐색\\n\",\n    \"df = pd.DataFrame(mattress_data['mattresses'])\\n\",\n    \"print(f\\\"\\\\n총 {len(df)}개의 매트리스 데이터\\\")\\n\",\n    \"print(f\\\"매트리스 타입: {df['type'].unique()}\\\")\\n\",\n    \"print(f\\\"가격 범위: {df['price'].min():,}원 ~ {df['price'].max():,}원\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"rag_section\"\n   },\n   \"source\": [\n    \"## 3️⃣ RAG 시스템 구축\\n\",\n    \"\\n\",\n    \"VectorDB를 사용해 매트리스 정보를 임베딩하고 검색 가능하게 만듭니다.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"rag_setup\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"class MattressRAG:\\n\",\n    \"    def __init__(self):\\n\",\n    \"        # 임베딩 모델 초기화\\n\",\n    \"        self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2')\\n\",\n    \"        \\n\",\n    \"        # ChromaDB 클라이언트 초기화\\n\",\n    \"        self.chroma_client = chromadb.Client()\\n\",\n    \"        \\n\",\n    \"        # 컬렉션 생성\\n\",\n    \"        try:\\n\",\n    \"            self.collection = self.chroma_client.create_collection(\\n\",\n    \"                name=\\\"mattress_collection\\\",\\n\",\n    \"                metadata={\\\"description\\\": \\\"매트리스 정보 벡터 저장소\\\"}\\n\",\n    \"            )\\n\",\n    \"        except:\\n\",\n    \"            # 이미 존재하는 경우 가져오기\\n\",\n    \"            self.collection = self.chroma_client.get_collection(\\\"mattress_collection\\\")\\n\",\n    \"            self.chroma_client.delete_collection(\\\"mattress_collection\\\")\\n\",\n    \"            self.collection = self.chroma_client.create_collection(\\\"mattress_collection\\\")\\n\",\n    \"    \\n\",\n    \"    def add_documents(self, mattress_data):\\n\",\n    \"        \\\"\\\"\\\"매트리스 데이터를 벡터 DB에 추가\\\"\\\"\\\"\\n\",\n    \"        documents = []\\n\",\n    \"        metadatas = []\\n\",\n    \"        ids = []\\n\",\n    \"        \\n\",\n    \"        for mattress in mattress_data['mattresses']:\\n\",\n    \"            # 검색용 텍스트 생성\\n\",\n    \"            text = f\\\"\\\"\\\"\\n\",\n    \"            매트리스명: {mattress['name']}\\n\",\n    \"            브랜드: {mattress['brand']}\\n\",\n    \"            타입: {mattress['type']}\\n\",\n    \"            가격: {mattress['price']:,}원\\n\",\n    \"            경도: {mattress['firmness']}\\n\",\n    \"            특징: {', '.join(mattress['features'])}\\n\",\n    \"            추천대상: {', '.join(mattress['recommended_for'])}\\n\",\n    \"            설명: {mattress['description']}\\n\",\n    \"            \\\"\\\"\\\"\\n\",\n    \"            \\n\",\n    \"            documents.append(text.strip())\\n\",\n    \"            metadatas.append(mattress)\\n\",\n    \"            ids.append(mattress['id'])\\n\",\n    \"        \\n\",\n    \"        # 임베딩 생성\\n\",\n    \"        embeddings = self.embedding_model.encode(documents).tolist()\\n\",\n    \"        \\n\",\n    \"        # ChromaDB에 추가\\n\",\n    \"        self.collection.add(\\n\",\n    \"            embeddings=embeddings,\\n\",\n    \"            documents=documents,\\n\",\n    \"            metadatas=metadatas,\\n\",\n    \"            ids=ids\\n\",\n    \"        )\\n\",\n    \"        \\n\",\n    \"        print(f\\\"✅ {len(documents)}개의 매트리스 정보를 벡터 DB에 추가했습니다.\\\")\\n\",\n    \"    \\n\",\n    \"    def search(self, query: str, n_results: int = 3) -> List[Dict]:\\n\",\n    \"        \\\"\\\"\\\"쿼리에 맞는 매트리스 검색\\\"\\\"\\\"\\n\",\n    \"        query_embedding = self.embedding_model.encode([query]).tolist()\\n\",\n    \"        \\n\",\n    \"        results = self.collection.query(\\n\",\n    \"            query_embeddings=query_embedding,\\n\",\n    \"            n_results=n_results\\n\",\n    \"        )\\n\",\n    \"        \\n\",\n    \"        return results['metadatas'][0]\\n\",\n    \"\\n\",\n    \"# RAG 시스템 초기화\\n\",\n    \"rag_system = MattressRAG()\\n\",\n    \"rag_system.add_documents(mattress_data)\\n\",\n    \"\\n\",\n    \"print(\\\"✅ RAG 시스템 구축 완료!\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"test_rag\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# RAG 시스템 테스트\\n\",\n    \"test_queries = [\\n\",\n    \"    \\\"허리통증에 좋은 매트리스\\\",\\n\",\n    \"    \\\"저렴한 가격의 매트리스\\\",\\n\",\n    \"    \\\"메모리폼 매트리스\\\"\\n\",\n    \"]\\n\",\n    \"\\n\",\n    \"for query in test_queries:\\n\",\n    \"    print(f\\\"\\\\n🔍 검색어: '{query}'\\\")\\n\",\n    \"    results = rag_system.search(query, n_results=2)\\n\",\n    \"    for i, result in enumerate(results, 1):\\n\",\n    \"        print(f\\\"  {i}. {result['name']} - {result['price']:,}원\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"function_calling_section\"\n   },\n   \"source\": [\n    \"## 4️⃣ Function Calling 구현\\n\",\n    \"\\n\",\n    \"AI Agent가 사용할 함수들을 정의합니다.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"function_definitions\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"class MattressFunctions:\\n\",\n    \"    def __init__(self, rag_system, mattress_data):\\n\",\n    \"        self.rag = rag_system\\n\",\n    \"        self.data = mattress_data\\n\",\n    \"        self.df = pd.DataFrame(mattress_data['mattresses'])\\n\",\n    \"    \\n\",\n    \"    def search_mattress_by_criteria(self, \\n\",\n    \"                                   mattress_type: str = None,\\n\",\n    \"                                   max_price: int = None,\\n\",\n    \"                                   min_price: int = None,\\n\",\n    \"                                   firmness: str = None,\\n\",\n    \"                                   size: str = None) -> List[Dict]:\\n\",\n    \"        \\\"\\\"\\\"조건에 맞는 매트리스 검색\\\"\\\"\\\"\\n\",\n    \"        df_filtered = self.df.copy()\\n\",\n    \"        \\n\",\n    \"        if mattress_type:\\n\",\n    \"            df_filtered = df_filtered[df_filtered['type'].str.contains(mattress_type, case=False, na=False)]\\n\",\n    \"        \\n\",\n    \"        if max_price:\\n\",\n    \"            df_filtered = df_filtered[df_filtered['price'] <= max_price]\\n\",\n    \"        \\n\",\n    \"        if min_price:\\n\",\n    \"            df_filtered = df_filtered[df_filtered['price'] >= min_price]\\n\",\n    \"        \\n\",\n    \"        if firmness:\\n\",\n    \"            df_filtered = df_filtered[df_filtered['firmness'].str.contains(firmness, case=False, na=False)]\\n\",\n    \"        \\n\",\n    \"        if size:\\n\",\n    \"            df_filtered = df_filtered[df_filtered['size'].apply(lambda x: size in x)]\\n\",\n    \"        \\n\",\n    \"        return df_filtered.to_dict('records')\\n\",\n    \"    \\n\",\n    \"    def get_mattress_by_health_condition(self, condition: str) -> List[Dict]:\\n\",\n    \"        \\\"\\\"\\\"건강 상태에 맞는 매트리스 추천\\\"\\\"\\\"\\n\",\n    \"        condition_mapping = {\\n\",\n    \"            '허리통증': ['메모리폼', '라텍스'],\\n\",\n    \"            '관절염': ['메모리폼', '라텍스'],\\n\",\n    \"            '더위': ['스프링', '하이브리드'],\\n\",\n    \"            '알레르기': ['라텍스']\\n\",\n    \"        }\\n\",\n    \"        \\n\",\n    \"        recommended_types = []\\n\",\n    \"        for key, types in condition_mapping.items():\\n\",\n    \"            if key in condition:\\n\",\n    \"                recommended_types.extend(types)\\n\",\n    \"        \\n\",\n    \"        if not recommended_types:\\n\",\n    \"            return self.df.to_dict('records')\\n\",\n    \"        \\n\",\n    \"        filtered_df = self.df[self.df['type'].isin(recommended_types)]\\n\",\n    \"        return filtered_df.to_dict('records')\\n\",\n    \"    \\n\",\n    \"    def get_budget_recommendations(self, budget: int) -> Dict:\\n\",\n    \"        \\\"\\\"\\\"예산별 매트리스 추천\\\"\\\"\\\"\\n\",\n    \"        budget_df = self.df[self.df['price'] <= budget].sort_values('price')\\n\",\n    \"        \\n{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "title"
   },
   "source": [
    "# 🛏️ 매트리스 구매 가이드 AI Agent\n",
    "\n",
    "**목표**: Function Calling과 RAG를 활용한 개인 맞춤형 매트리스 추천 AI Agent 개발\n",
    "\n",
    "## 📋 프로젝트 구성\n",
    "1. **환경 설정 및 라이브러리 설치**\n",
    "2. **데이터 준비 및 RAG 시스템 구축**\n",
    "3. **Function Calling 구현**\n",
    "4. **AI Agent 개발**\n",
    "5. **Streamlit 챗봇 인터페이스**\n",
    "6. **테스트 및 평가**\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "setup"
   },
   "source": [
    "## 1️⃣ 환경 설정 및 라이브러리 설치"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "install_packages"
   },
   "outputs": [],
   "source": [
    "# 필요한 라이브러리 설치\n",
    "!pip install -q openai chromadb sentence-transformers pandas numpy\n",
    "!pip install -q streamlit gradio pyngrok\n",
    "!pip install -q langchain langchain-openai langchain-community"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "imports"
   },
   "outputs": [],
   "source": [
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import chromadb\n",
    "import openai\n",
    "from sentence_transformers import SentenceTransformer\n",
    "import streamlit as st\n",
    "import gradio as gr\n",
    "from typing import List, Dict, Any, Optional\n",
    "import os\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "print(\"✅ 모든 라이브러리가 성공적으로 import되었습니다!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "api_setup"
   },
   "outputs": [],
   "source": [
    "# OpenAI API 키 설정 (여러분의 API 키를 입력하세요)\n",
    "# OpenAI API 키가 없다면 Hugging Face의 무료 모델을 사용할 수 있습니다\n",
    "\n",
    "OPENAI_API_KEY = \"your-openai-api-key-here\"  # 여기에 실제 API 키를 입력하세요\n",
    "\n",
    "# API 키가 없는 경우를 위한 대안 설정\n",
    "USE_OPENAI = OPENAI_API_KEY != \"your-openai-api-key-here\"\n",
    "\n",
    "if USE_OPENAI:\n",
    "    openai.api_key = OPENAI_API_KEY\n",
    "    print(\"✅ OpenAI API 설정 완료\")\n",
    "else:\n",
    "    print(\"⚠️ OpenAI API 키가 설정되지 않았습니다. Hugging Face 모델을 사용합니다.\")\n",
    "    print(\"실제 사용 시에는 OpenAI API 키를 설정해주세요.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "data_section"
   },
   "source": [
    "## 2️⃣ 데이터 준비 및 로드\n",
    "\n",
    "**주의**: 실제 사용 시에는 다운로드받은 JSON 파일들을 코랩에 업로드하거나 Google Drive에서 불러와야 합니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "create_sample_data"
   },
   "outputs": [],
   "source": [
    "# 샘플 데이터 생성 (실제로는 다운로드한 파일을 사용하세요)\n",
    "sample_mattress_data = {\n",
    "    \"mattresses\": [\n",
    "        {\n",
    "            \"id\": \"ikea_hafslo\",\n",
    "            \"name\": \"IKEA HÄFSLO 매트리스\",\n",
    "            \"brand\": \"IKEA\",\n",
    "            \"type\": \"스프링\",\n",
    "            \"price\": 179000,\n",
    "            \"size\": [\"싱글\", \"더블\", \"퀸\", \"킹\"],\n",
    "            \"firmness\": \"중간\",\n",
    "            \"features\": [\"통기성 우수\", \"독립스프링\", \"천연라텍스\"],\n",
    "            \"recommended_for\": [\"평균 체중\", \"모든 수면자세\"],\n",
    "            \"description\": \"525개 독립스프링과 천연라텍스 층으로 구성된 매트리스\"\n",
    "        },\n",
    "        {\n",
    "            \"id\": \"memory_foam_premium\",\n",
    "            \"name\": \"프리미엄 메모리폼 매트리스\",\n",
    "            \"brand\": \"오늘의집\",\n",
    "            \"type\": \"메모리폼\",\n",